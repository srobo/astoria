[tool.poetry]
name = "astoria"
version = "0.11.1"
description = "Robot Management System for Student Robotics Kit"
authors = [
    "Dan Trickey <dtrickey@studentrobotics.org>",
    "Karina Kwiatek <kkwiatek@studentrobotics.org>",
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/srobo/astoria"
homepage = "https://github.com/srobo/astoria"
documentation = "https://srobo.github.io/astoria"
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.8"
pydantic = "^1.9.1"
click = "^8.1.2"
dbus-next = "^0.2.3"
gmqtt = "^0.6.11"
tomli = { version = "^2.0.1", python = "<=3.10" }
tomli-w = "^1.0.0"

[tool.poetry.dev-dependencies]
mypy = "*"
pytest = "*"
pytest-cov = "*"
pytest-asyncio = "*"
rope = "*"
ruff = "*"
sphinx = "*"
sphinx-rtd-theme = "*"
sphinx_autodoc_typehints = "*"
sphinx-pydantic = "*"
sphinx-jsonschema = "*"
sphinx-autobuild = "*"
sphinx-click = "*"
m2r2 = "*"
types-click = "*"

[tool.poetry.scripts]
astctl = 'astoria.astctl:main'
astdiskd = 'astoria.astdiskd:main'
astmetad = 'astoria.astmetad:main'
astprocd = 'astoria.astprocd:main'
astwifid = 'astoria.astwifid:main'

[build-system]
requires = ["poetry>=1.0"]
build-backend = "poetry.masonry.api"

[tool.mypy]
mypy_path = "stubs"

warn_unused_ignores = true
warn_return_any = true

strict_optional = true
no_implicit_optional = true

disallow_any_unimported = true
disallow_any_explicit = true
disallow_subclassing_any = true
disallow_any_generics = true

disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["dbus_next.*", "gmqtt.*"]
disallow_any_explicit = false

[tool.ruff]
select = [
    "A",
    "ANN",
    "B",
    "BLE",
    "C4",
    "COM",
    "DJ",
    "DTZ",
    "E",
    "F",
    "FBT",
    "I",
    "N",
    "S",
    "T10",
    "UP",
    "W",
]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "B009",    # Do not call `getattr` with a constant attribute value.
    "B027",    # an empty method in an abstract base class, but has no abstract decorator
    "N805",    # First argument of a method should be named `self`
    "S101",    # S101 Use of `assert` detected
]

target-version = "py38"
line-length = 90